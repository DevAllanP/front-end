{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Workspace\\\\Workspace_2\\\\Project\\\\E-Commerce\\\\front-end\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\n/*const Stripe = require('stripe');\r\nconst stripe = Stripe('sk_test_51Kb3R1ASJH3PI53qo0Des8MLgewbQeQ1ieWwchtLaBPibiswwGD23KGh4uarku5jXWE0GKkETeocvljwz0NpuPKT00K6qaIsTV');*/\n\nlet StripePaiementComponent = class StripePaiementComponent {\n  constructor(fb, authService, paiementService, service, Stripe) {\n    this.fb = fb;\n    this.authService = authService;\n    this.paiementService = paiementService;\n    this.service = service;\n    this.Stripe = Stripe; // This is your test publishable API key.\n\n    this.stripe = require('stripe')(\"pk_test_51Kb3R1ASJH3PI53qIMReKI1VHjOxF14Apm5MH9qIckiKYhGDFoGDx2n59ijkBpvdef9gpDUU8g9vA0FzqVKSIXXD008WQPy3xd\"); // The items the customer wants to buy\n\n    this.items = [{\n      id: \"xl-tshirt\"\n    }];\n    this.paiement = this.fb.group({\n      nom: ['', Validators.required],\n      prix: ['', Validators.required],\n      price: ['', Validators.required]\n    });\n  }\n\n  ngOnInit() {\n    this.authService.currentUser.subscribe({\n      next: u => {\n        this.paiementService.getOrder().subscribe();\n        console.log(u);\n        this.currentUser = u;\n      }\n    });\n  }\n\n  onSubmit() {\n    this.paiementService.cree;\n  } // Fetches a payment intent and captures the client secret\n\n\n  initialize(elements, items) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield fetch(\"/create-payment-intent\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          items\n        })\n      });\n      const {\n        clientSecret\n      } = yield response.json();\n      const appearance = {\n        theme: 'night'\n      };\n      elements = _this.stripe.elements({\n        clientSecret: 'CLIENT_SECRET'\n      });\n      const paymentElement = elements.create(\"payment\");\n      paymentElement.mount(\"#payment-element\");\n    })();\n  }\n\n  handleSubmit(e) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      e.preventDefault();\n\n      _this2.setLoading(true);\n\n      const {\n        error\n      } = yield _this2.stripe.confirmPayment({\n        confirmParams: {\n          // Make sure to change this to your payment completion page\n          return_url: \"http://localhost:4200/test\"\n        }\n      }); // This point will only be reached if there is an immediate error when\n      // confirming the payment. Otherwise, your customer will be redirected to\n      // your `return_url`. For some payment methods like iDEAL, your customer will\n      // be redirected to an intermediate site first to authorize the payment, then\n      // redirected to the `return_url`.\n\n      if (error.type === \"card_error\" || error.type === \"validation_error\") {\n        _this2.showMessage(error.message);\n      } else {\n        _this2.showMessage(\"An unexpected error occured.\");\n      }\n\n      _this2.setLoading(false);\n    })();\n  } // Fetches the payment intent status after payment submission\n\n\n  checkStatus() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n\n      if (!clientSecret) {\n        return;\n      }\n\n      const {\n        paymentIntent\n      } = yield _this3.stripe.retrievePaymentIntent(clientSecret);\n\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          _this3.showMessage(\"Payment succeeded!\");\n\n          break;\n\n        case \"processing\":\n          _this3.showMessage(\"Your payment is processing.\");\n\n          break;\n\n        case \"requires_payment_method\":\n          _this3.showMessage(\"Your payment was not successful, please try again.\");\n\n          break;\n\n        default:\n          _this3.showMessage(\"Something went wrong.\");\n\n          break;\n      }\n    })();\n  } // ------- UI helpers -------\n\n\n  showMessage(messageText) {\n    let messageContainer = document.querySelector(\"#payment-message\");\n    messageContainer === null || messageContainer === void 0 ? void 0 : messageContainer.classList.remove(\"hidden\");\n    messageContainer = messageText;\n    setTimeout(function () {\n      messageContainer === null || messageContainer === void 0 ? void 0 : messageContainer.classList.add(\"hidden\");\n      messageText.textContent = \"\";\n    }, 4000);\n  } // Show a spinner on payment submission\n\n\n  setLoading(isLoading) {\n    var _a, _b, _c, _d;\n\n    if (isLoading) {\n      // Disable the button and show a spinner\n      document.querySelector(\"#submit\");\n      (_a = document.querySelector(\"#spinner\")) === null || _a === void 0 ? void 0 : _a.classList.remove(\"hidden\");\n      (_b = document.querySelector(\"#button-text\")) === null || _b === void 0 ? void 0 : _b.classList.add(\"hidden\");\n    } else {\n      document.querySelector(\"#submit\");\n      (_c = document.querySelector(\"#spinner\")) === null || _c === void 0 ? void 0 : _c.classList.add(\"hidden\");\n      (_d = document.querySelector(\"#button-text\")) === null || _d === void 0 ? void 0 : _d.classList.remove(\"hidden\");\n    }\n  }\n\n};\nStripePaiementComponent = __decorate([Component({\n  selector: 'app-stripe-paiement',\n  templateUrl: './stripe-paiement.component.html',\n  styleUrls: ['./stripe-paiement.component.css']\n})], StripePaiementComponent);\nexport { StripePaiementComponent };\n\nfunction Stripe(arg0) {\n  throw new Error('Function not implemented.');\n}","map":{"version":3,"sources":["C:/Workspace/Workspace_2/Project/E-Commerce/front-end/src/app/modules/stripe-paiement/stripe-paiement.component.ts"],"names":["__decorate","Component","Validators","StripePaiementComponent","constructor","fb","authService","paiementService","service","Stripe","stripe","require","items","id","paiement","group","nom","required","prix","price","ngOnInit","currentUser","subscribe","next","u","getOrder","console","log","onSubmit","cree","initialize","elements","response","fetch","method","headers","body","JSON","stringify","clientSecret","json","appearance","theme","paymentElement","create","mount","handleSubmit","e","preventDefault","setLoading","error","confirmPayment","confirmParams","return_url","type","showMessage","message","checkStatus","URLSearchParams","window","location","search","get","paymentIntent","retrievePaymentIntent","status","messageText","messageContainer","document","querySelector","classList","remove","setTimeout","add","textContent","isLoading","_a","_b","_c","_d","selector","templateUrl","styleUrls","arg0","Error"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\n/*const Stripe = require('stripe');\r\nconst stripe = Stripe('sk_test_51Kb3R1ASJH3PI53qo0Des8MLgewbQeQ1ieWwchtLaBPibiswwGD23KGh4uarku5jXWE0GKkETeocvljwz0NpuPKT00K6qaIsTV');*/\r\nlet StripePaiementComponent = class StripePaiementComponent {\r\n    constructor(fb, authService, paiementService, service, Stripe) {\r\n        this.fb = fb;\r\n        this.authService = authService;\r\n        this.paiementService = paiementService;\r\n        this.service = service;\r\n        this.Stripe = Stripe;\r\n        // This is your test publishable API key.\r\n        this.stripe = require('stripe')(\"pk_test_51Kb3R1ASJH3PI53qIMReKI1VHjOxF14Apm5MH9qIckiKYhGDFoGDx2n59ijkBpvdef9gpDUU8g9vA0FzqVKSIXXD008WQPy3xd\");\r\n        // The items the customer wants to buy\r\n        this.items = [{ id: \"xl-tshirt\" }];\r\n        this.paiement = this.fb.group({\r\n            nom: ['', Validators.required],\r\n            prix: ['', Validators.required],\r\n            price: ['', Validators.required]\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        this.authService.currentUser.subscribe({\r\n            next: (u) => {\r\n                this.paiementService.getOrder().subscribe();\r\n                console.log(u);\r\n                this.currentUser = u;\r\n            },\r\n        });\r\n    }\r\n    onSubmit() {\r\n        this.paiementService.cree;\r\n    }\r\n    // Fetches a payment intent and captures the client secret\r\n    async initialize(elements, items) {\r\n        const response = await fetch(\"/create-payment-intent\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ items }),\r\n        });\r\n        const { clientSecret } = await response.json();\r\n        const appearance = {\r\n            theme: 'night',\r\n        };\r\n        elements = this.stripe.elements({\r\n            clientSecret: 'CLIENT_SECRET',\r\n        });\r\n        const paymentElement = elements.create(\"payment\");\r\n        paymentElement.mount(\"#payment-element\");\r\n    }\r\n    async handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.setLoading(true);\r\n        const { error } = await this.stripe.confirmPayment({\r\n            confirmParams: {\r\n                // Make sure to change this to your payment completion page\r\n                return_url: \"http://localhost:4200/test\",\r\n            },\r\n        });\r\n        // This point will only be reached if there is an immediate error when\r\n        // confirming the payment. Otherwise, your customer will be redirected to\r\n        // your `return_url`. For some payment methods like iDEAL, your customer will\r\n        // be redirected to an intermediate site first to authorize the payment, then\r\n        // redirected to the `return_url`.\r\n        if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n            this.showMessage(error.message);\r\n        }\r\n        else {\r\n            this.showMessage(\"An unexpected error occured.\");\r\n        }\r\n        this.setLoading(false);\r\n    }\r\n    // Fetches the payment intent status after payment submission\r\n    async checkStatus() {\r\n        const clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\r\n        if (!clientSecret) {\r\n            return;\r\n        }\r\n        const { paymentIntent } = await this.stripe.retrievePaymentIntent(clientSecret);\r\n        switch (paymentIntent.status) {\r\n            case \"succeeded\":\r\n                this.showMessage(\"Payment succeeded!\");\r\n                break;\r\n            case \"processing\":\r\n                this.showMessage(\"Your payment is processing.\");\r\n                break;\r\n            case \"requires_payment_method\":\r\n                this.showMessage(\"Your payment was not successful, please try again.\");\r\n                break;\r\n            default:\r\n                this.showMessage(\"Something went wrong.\");\r\n                break;\r\n        }\r\n    }\r\n    // ------- UI helpers -------\r\n    showMessage(messageText) {\r\n        let messageContainer = document.querySelector(\"#payment-message\");\r\n        messageContainer === null || messageContainer === void 0 ? void 0 : messageContainer.classList.remove(\"hidden\");\r\n        messageContainer = messageText;\r\n        setTimeout(function () {\r\n            messageContainer === null || messageContainer === void 0 ? void 0 : messageContainer.classList.add(\"hidden\");\r\n            messageText.textContent = \"\";\r\n        }, 4000);\r\n    }\r\n    // Show a spinner on payment submission\r\n    setLoading(isLoading) {\r\n        var _a, _b, _c, _d;\r\n        if (isLoading) {\r\n            // Disable the button and show a spinner\r\n            document.querySelector(\"#submit\");\r\n            (_a = document.querySelector(\"#spinner\")) === null || _a === void 0 ? void 0 : _a.classList.remove(\"hidden\");\r\n            (_b = document.querySelector(\"#button-text\")) === null || _b === void 0 ? void 0 : _b.classList.add(\"hidden\");\r\n        }\r\n        else {\r\n            document.querySelector(\"#submit\");\r\n            (_c = document.querySelector(\"#spinner\")) === null || _c === void 0 ? void 0 : _c.classList.add(\"hidden\");\r\n            (_d = document.querySelector(\"#button-text\")) === null || _d === void 0 ? void 0 : _d.classList.remove(\"hidden\");\r\n        }\r\n    }\r\n};\r\nStripePaiementComponent = __decorate([\r\n    Component({\r\n        selector: 'app-stripe-paiement',\r\n        templateUrl: './stripe-paiement.component.html',\r\n        styleUrls: ['./stripe-paiement.component.css']\r\n    })\r\n], StripePaiementComponent);\r\nexport { StripePaiementComponent };\r\nfunction Stripe(arg0) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n"]},"metadata":{},"sourceType":"module"}